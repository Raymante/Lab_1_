from PIL import Image
import os, sys

INPUT = "img.png"
OUTPUT_PNG = "img_marked.png"
OUTPUT_PBM = "img_marked.pbm"

EXPECTED_WIDTH = 960
EXPECTED_HEIGHT = 1280

# Вариант 10: цвет точки и позиция
POINTS = [
    ((64, 64, 255), "upper_left"),
    ((255, 255, 64), "upper_right"),
    ((255, 64, 255), "lower_left"),
]

POINT_SIZE = 5
THRESHOLD = 128

def draw_point(pixels, width, height, x_center, y_center, color, size=1):
    half = size // 2
    for yy in range(y_center - half, y_center - half + size):
        for xx in range(x_center - half, x_center - half + size):
            if 0 <= xx < width and 0 <= yy < height:
                pixels[xx, yy] = color

def rgb_to_luminance(r, g, b):
    return 0.299*r + 0.587*g + 0.114*b

def save_as_pbm(img, output_file, threshold=128):
    w, h = img.size
    pixels = img.load()

    with open(output_file, "w", encoding="ascii") as f:
        f.write("P1\n")
        f.write(f"# Generated by Lab_1.py\n")
        f.write(f"{w} {h}\n")

        for y in range(h):
            row_bits = []
            for x in range(w):
                r, g, b = pixels[x, y]
                lum = rgb_to_luminance(r, g, b)
                bit = 0 if lum > threshold else 1
                row_bits.append(str(bit))
            f.write(" ".join(row_bits) + "\n")

def main():
    if not os.path.exists(INPUT):
        print(f"файл '{INPUT}' не найден в {os.getcwd()}")
        sys.exit(1)

    img = Image.open(INPUT).convert("RGB")
    w, h = img.size

    if (w, h) != (EXPECTED_WIDTH, EXPECTED_HEIGHT):
        print(f"{EXPECTED_WIDTH}x{EXPECTED_HEIGHT}, "
              f"{w}x{h}")

    pixels = img.load()

    coords = {
        "upper_left": (20, 20),
        "upper_right": (w - 20, 20),
        "lower_left": (20, h - 20),
        "lower_right": (w - 20, h - 20),
        "center": (w // 2, h // 2),
    }

    for color, pos_name in POINTS:
        if pos_name not in coords:
            continue
        x, y = coords[pos_name]
        draw_point(pixels, w, h, x, y, color, size=POINT_SIZE)

    img.save(OUTPUT_PNG)
    print(f"Сохранено PNG: {OUTPUT_PNG}")

    save_as_pbm(img, OUTPUT_PBM, threshold=THRESHOLD)
    print(f"Сохранено PBM: {OUTPUT_PBM}")

if __name__ == "__main__":
    main()
